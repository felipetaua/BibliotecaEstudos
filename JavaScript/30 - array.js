/*
    ARRAYS - M√âTODOS
*/

// push
// length
// sort
// delete


// splice (unir / ligar)
//slice (fatiar)
// pop
// shift

const students = ['Jo√£o', 'Maria', 'Pedro', 'Carla', 'Bia', 'Murilo']

students.push('Rodolfo');
students.push('Tau√£'); // Voc√™ j√° usou este corretamente!
console.log("Depois do push():", students);
// Sa√≠da: ['Jo√£o', 'Maria', 'Pedro', 'Carla', 'Bia', 'Murilo', 'Rodolfo', 'Tau√£']

/*
    length
    Esta √© uma propriedade (n√£o um m√©todo) que retorna o n√∫mero de elementos em um array.
*/ 
console.log("Comprimento do array (length):", students.length);
// Sa√≠da: 8 (ap√≥s os pushes anteriores)

/*
    sort()
Ordena os elementos do array. Por padr√£o, a ordena√ß√£o √© feita em ordem alfab√©tica (para strings) ou num√©rica.
*/

students.sort();
console.log("Depois do sort():", students);
// Sa√≠da: ['Bia', 'Carla', 'Jo√£o', 'Maria', 'Murilo', 'Pedro', 'Rodolfo', 'Tau√£']

/*
    delete (operador)
O operador delete remove um elemento de um array, mas deixa um "buraco" (um valor undefined ou empty) no lugar. Geralmente, pop(), shift(), ou splice() s√£o prefer√≠veis para remover elementos de arrays.
*/

delete students[1]; // Remove o elemento no √≠ndice 1 ('Carla' ap√≥s o sort)
console.log("Depois do delete students[1]:", students);
// Sa√≠da: ['Bia', empty, 'Jo√£o', 'Maria', 'Murilo', 'Pedro', 'Rodolfo', 'Tau√£']
console.log("Elemento no √≠ndice 1:", students[1]); // Sa√≠da: undefined

// Aten√ß√£o: O length do array n√£o muda ap√≥s usar delete dessa forma.


/*
    splice()
Altera o conte√∫do de um array removendo, substituindo ou adicionando elementos. √â um m√©todo muito vers√°til!

Sintaxe: array.splice(√≠ndiceInicial, quantidadeParaRemover, elemento1, elemento2, ...)
*/

// Vamos recriar o array para exemplos mais claros com splice
let fruits = ['Banana', 'Laranja', 'Ma√ß√£', 'Manga'];
console.log("Array fruits original:", fruits);

// Remover 1 elemento a partir do √≠ndice 2 ('Ma√ß√£')
fruits.splice(2, 1);
console.log("Depois de splice(2, 1) - removeu 'Ma√ß√£':", fruits);
// Sa√≠da: ['Banana', 'Laranja', 'Manga']

// Remover 0 elementos a partir do √≠ndice 1 e adicionar 'Lim√£o' e 'Abacaxi'
fruits.splice(1, 0, 'Lim√£o', 'Abacaxi');
console.log("Depois de splice(1, 0, 'Lim√£o', 'Abacaxi') - adicionou:", fruits);
// Sa√≠da: ['Banana', 'Lim√£o', 'Abacaxi', 'Laranja', 'Manga']

// Remover 2 elementos a partir do √≠ndice 0 ('Banana', 'Lim√£o') e adicionar 'Uva'
fruits.splice(0, 2, 'Uva');
console.log("Depois de splice(0, 2, 'Uva') - removeu e adicionou:", fruits);
// Sa√≠da: ['Uva', 'Abacaxi', 'Laranja', 'Manga']


/*
    slice()
Retorna uma c√≥pia superficial de uma por√ß√£o de um array em um novo array. O array original n√£o √© modificado. üçâ

Sintaxe: array.slice(√≠ndiceInicial, √≠ndiceFinal_n√£oIncluso)
*/

const animals = ['Gato', 'Cachorro', 'P√°ssaro', 'Peixe', 'Coelho'];
console.log("Array animals original:", animals);

// Pega os elementos do √≠ndice 1 ('Cachorro') at√© o √≠ndice 3 ('Peixe'), sem incluir o 3.
const someAnimals = animals.slice(1, 3);
console.log("Depois de slice(1, 3):", someAnimals);
// Sa√≠da: ['Cachorro', 'P√°ssaro']

// Se o √≠ndice final n√£o for fornecido, ele fatia at√© o final do array.
const lastAnimals = animals.slice(2);
console.log("Depois de slice(2):", lastAnimals);
// Sa√≠da: ['P√°ssaro', 'Peixe', 'Coelho']

console.log("Array animals original (n√£o modificado):", animals);
// Sa√≠da: ['Gato', 'Cachorro', 'P√°ssaro', 'Peixe', 'Coelho']

/*
    pop()
Remove o √∫ltimo elemento de um array e retorna esse elemento. Modifica o array original.
*/ 

// Usando o array students novamente, lembre-se que ele foi modificado
console.log("Array students antes do pop():", students);
// Exemplo de sa√≠da (dependendo dos passos anteriores): ['Bia', empty, 'Jo√£o', 'Maria', 'Murilo', 'Pedro', 'Rodolfo', 'Tau√£']

const removedStudentPop = students.pop();
console.log("Elemento removido com pop():", removedStudentPop); // Sa√≠da: 'Tau√£'
console.log("Array students depois do pop():", students);
// Exemplo de sa√≠da: ['Bia', empty, 'Jo√£o', 'Maria', 'Murilo', 'Pedro', 'Rodolfo']


/*
    shift()
Remove o primeiro elemento de um array e retorna esse elemento. Modifica o array original e reindexa os demais elementos.
*/
console.log("Array students antes do shift():", students);
// Exemplo de sa√≠da: ['Bia', empty, 'Jo√£o', 'Maria', 'Murilo', 'Pedro', 'Rodolfo']

const removedStudentShift = students.shift();
console.log("Elemento removido com shift():", removedStudentShift); // Sa√≠da: 'Bia'
console.log("Array students depois do shift():", students);
// Exemplo de sa√≠da: [empty, 'Jo√£o', 'Maria', 'Murilo', 'Pedro', 'Rodolfo']
// Observe que o 'empty' que estava no √≠ndice 1 agora est√° no √≠ndice 0.